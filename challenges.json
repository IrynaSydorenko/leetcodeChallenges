[
  {
    "id": 334,
    "title": "Reverse String",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.",
    "input": [["h", "e", "l", "l", "o"]],
    "output": [["o", "l", "l", "e", "h"]]
  },
  {
    "id": 412,
    "title": "FizzBuzz",
    "description": "// Given an integer n, return a string array answer (1-indexed) where: answer[i] == 'FizzBuzz' if i is divisible by 3 and 5. answer[i] == 'Fizz' if i is divisible by 3.answer[i] == 'Buzz' if i is divisible by 5. answer[i] == i (as a string) if none of the above conditions are true.",
    "input": ["n = 3", "n = 5", "n = 15"],
    "output": [
      ["1", "2", "Fizz"],
      ["1", "2", "Fizz", "4", "Buzz"],
      [
        "1",
        "2",
        "Fizz",
        "4",
        "Buzz",
        "Fizz",
        "7",
        "8",
        "Fizz",
        "Buzz",
        "11",
        "Fizz",
        "13",
        "14",
        "FizzBuzz"
      ]
    ]
  },
  {
    "id": 136,
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.",
    "input": [[2, 2, 1], [4, 1, 2, 1, 2], [1]],
    "output": [1, 4, 1]
  },
  {
    "id": 104,
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "input": [
      [3, 9, 20, null, null, 15, 7],
      [1, null, 2]
    ],
    "output": [3, 2]
  }
]
