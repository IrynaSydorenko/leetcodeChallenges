[
  {
    "id": 334,
    "title": "Reverse String",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.",
    "input": [["h", "e", "l", "l", "o"]],
    "output": [["o", "l", "l", "e", "h"]]
  },
  {
    "id": 412,
    "title": "FizzBuzz",
    "description": "// Given an integer n, return a string array answer (1-indexed) where: answer[i] == 'FizzBuzz' if i is divisible by 3 and 5. answer[i] == 'Fizz' if i is divisible by 3.answer[i] == 'Buzz' if i is divisible by 5. answer[i] == i (as a string) if none of the above conditions are true.",
    "input": ["n = 3", "n = 5", "n = 15"],
    "output": [
      ["1", "2", "Fizz"],
      ["1", "2", "Fizz", "4", "Buzz"],
      [
        "1",
        "2",
        "Fizz",
        "4",
        "Buzz",
        "Fizz",
        "7",
        "8",
        "Fizz",
        "Buzz",
        "11",
        "Fizz",
        "13",
        "14",
        "FizzBuzz"
      ]
    ]
  },
  {
    "id": 136,
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.",
    "input": [[2, 2, 1], [4, 1, 2, 1, 2], [1]],
    "output": [1, 4, 1]
  },
  {
    "id": 104,
    "title": "Maximum Depth of Binary Tree",
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "input": [
      [3, 9, 20, null, null, 15, 7],
      [1, null, 2]
    ],
    "output": [3, 2]
  },
  {
    "id": 283,
    "title": "Move Zeroes",
    "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array.",
    "input": [[0, 1, 0, 3, 12], [0]],
    "output": [[1, 3, 12, 0, 0], [0]]
  },
  {
    "id": 171,
    "title": "Excel Sheet Column Number",
    "description": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.",
    "input": ["A", "AB", "ZY"],
    "output": [1, 28, 701]
  },
  {
    "id": 206,
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list. ",
    "input": [[1, 2, 3, 4, 5], [1, 2], []],
    "output": [[5, 4, 3, 2, 1], [2, 1], []]
  },
  {
    "id": 169,
    "title": "Majority Element",
    "description": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
    "input": [
      [3, 2, 3],
      [2, 2, 1, 1, 1, 2, 2]
    ],
    "output": [3, 2]
  },
  {
    "id": 1,
    "title": "Title",
    "description": "",
    "input": [],
    "output": []
  },
  {
    "id": 242,
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    "input": [
      ["anagram", "nagaram"],
      ["rat", "car"]
    ],
    "output": [true, false]
  },
  {
    "id": 217,
    "title": "Contains Duplicate",
    "description": "// Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "input": [
      [1, 2, 3, 1],
      [1, 2, 3, 4],
      [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]
    ],
    "output": [true, false, true]
  },
  {
    "id": 387,
    "title": "First Unique Character in a String",
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
    "input": ["loveleetcode", "aabb"],
    "output": [2, -1]
  },
  {
    "id": 108,
    "title": "Convert Sorted Array to Binary Search Tree",
    "description": "// Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.",
    "input": [
      [-10, -3, 0, 5, 9],
      [1, 3]
    ],
    "output": [
      [0, -3, 9, -10, null, 5],
      [3, 1]
    ]
  },
  {
    "id": 268,
    "title": "Missing Number",
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "input": [
      [3, 0, 1],
      [0, 1],
      [9, 6, 4, 2, 3, 5, 7, 0, 1]
    ],
    "output": [2, 2, 8]
  },
  {
    "id": 350,
    "title": "Intersection of Two Arrays II",
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
    "input": [
      [
        [1, 2, 2, 1],
        [2, 2]
      ],
      [
        [4, 9, 5],
        [9, 4, 9, 8, 4]
      ]
    ],
    "output": [
      [2, 2],
      [4, 9]
    ]
  },
  {
    "id": 121,
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "input": [
      [7, 1, 5, 3, 6, 4],
      [7, 6, 4, 3, 1]
    ],
    "output": [5, 0]
  },
  {
    "id": 202,
    "title": "Happy Number",
    "description": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not.",
    "input": [19, 2],
    "output": [true, false]
  },
  {
    "id": 118,
    "title": "Pascal's Triangle",
    "description": "Given an integer numRows, return the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
    "input": [5, 1],
    "output": [[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]], [[1]]]
  },
  {
    "id": 101,
    "title": "Symmetric Tree",
    "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
    "input": [
      [1, 2, 2, 3, 4, 4, 3],
      [1, 2, 2, null, 3, null, 3]
    ],
    "output": [true, false]
  },
  {
    "id": 326,
    "title": "Power of Three",
    "description": "Given an integer n, return true if it is a power of three. Otherwise, return false. An integer n is a power of three, if there exists an integer x such that n == 3x.",
    "input": [27, 0, -1],
    "output": [true, false, false]
  },
  {
    "id": 66,
    "title": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's. Increment the large integer by one and return the resulting array of digits.",
    "description": "",
    "input": [[1, 2, 3], [4, 3, 2, 1], [9]],
    "output": [
      [1, 2, 4],
      [4, 3, 2, 2],
      [1, 0]
    ]
  },
  {
    "id": 28,
    "title": "Implement strStr()",
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "input": [
      ["sadbutsad", "sad"],
      ["leetcode", "leeto"]
    ],
    "output": [0, -1]
  },
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "input": [
      [[2, 7, 11, 15], 9],
      [[3, 2, 4], 6]
    ],
    "output": [
      [0, 1],
      [1, 2]
    ]
  },
  {
    "id": 26,
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums. Return k.",
    "input": [
      [1, 1, 2],
      [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
    ],
    "output": [2, 5]
  },
  {
    "id": 20,
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if:Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.",
    "input": ["()", "()[]{}", "(]", "([])"],
    "output": [true, true, false, true]
  },
  {
    "id": 141,
    "title": "Linked List Cycle",
    "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false.",
    "input": [
      [[3, 2, 0, -4], 1],
      [[1, 2], 0],
      [[1], -1]
    ],
    "output": [true, true, false]
  },
  {
    "id": 234,
    "title": "Palindrome Linked List",
    "description": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.",
    "input": [
      [1, 2, 2, 1],
      [1, 2]
    ],
    "output": [true, false]
  },
  {
    "id": 88,
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.",
    "input": [
      [[1, 2, 3, 0, 0, 0], 3, [2, 5, 6], 2],
      [[1], 1, [], 0],
      [[0], 0, [1], 1]
    ],
    "output": [[1, 2, 2, 3, 5, 6], [1], [1]]
  },
  {
    "id": 14,
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string ''.",
    "input": [
      ["flower", "flow", "flight"],
      ["dog", "racecar", "car"]
    ],
    "output": ["fl", ""]
  },
  {
    "id": 160,
    "title": "Intersection of Two Linked Lists ",
    "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. For example, the following two linked lists begin to intersect at node c1: The test cases are generated such that there are no cycles anywhere in the entire linked structure. Note that the linked lists must retain their original structure after the function returns.",
    "input": [
      [
        [4, 1, 8, 4, 5],
        [5, 6, 1, 8, 4, 5]
      ],
      [
        [1, 9, 1, 2, 4],
        [3, 2, 4]
      ],
      [
        [2, 6, 4],
        [1, 5]
      ]
    ],
    "output": [8, 2, "No intersection"]
  },
  {
    "id": 125,
    "title": "Valid Palindrome",
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise.",
    "input": ["A man, a plan, a canal: Panama", "race a car", " "],
    "output": [true, false, true]
  },
  {
    "id": 189,
    "title": "Rotate Array",
    "description": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.",
    "input": [
      [[1, 2, 3, 4, 5, 6, 7], 3],
      [[-1, -100, 3, 99], 2]
    ],
    "output": [
      [5, 6, 7, 1, 2, 3, 4],
      [3, 99, -1, -100]
    ]
  },
  {
    "id": 204,
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
    "input": [10, 0, 1],
    "output": [4, 0, 0]
  },
  {
    "id": 0,
    "title": "Title",
    "description": "",
    "input": [],
    "output": []
  }
]
